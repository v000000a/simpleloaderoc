-- onix_installer.lua
-- O/UNIX (Onix) Installer - Stable Version

local component = require("component")
local computer = require("computer")
local filesystem = require("filesystem")

-- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è O/UNIX
local Onix = {
  name = "O/UNIX",
  version = "0.1",
  codename = "Onix",
  requirements = {
    minMemory = 128 * 1024,
    minStorage = 5000,
  }
}

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
local function checkCompatibility()
  local issues = {}
  
  if computer.totalMemory() < Onix.requirements.minMemory then
    table.insert(issues, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏")
  end
  
  local mainFs = component.list("filesystem")()
  if not mainFs then
    table.insert(issues, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –¥–∏—Å–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
  else
    local disk = component.proxy(mainFs)
    if disk.spaceTotal() < Onix.requirements.minStorage then
      table.insert(issues, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ")
    end
  end
  
  return issues
end

-- –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
local function createFilesystemStructure()
  print("–°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É O/UNIX...")
  
  local dirs = {
    "/bin", "/etc", "/home", "/tmp", "/var", 
    "/usr", "/usr/bin", "/boot", "/root"
  }
  
  for _, dir in ipairs(dirs) do
    filesystem.makeDirectory(dir)
    print("   üìÅ " .. dir)
  end
end

-- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç
local function installSystemUtilities()
  print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã...")
  
  local utilities = {
    ["/boot.lua"] = [[
-- O/UNIX Bootloader
local computer = require("computer")
local filesystem = require("filesystem")

print("–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è O/UNIX 0.1 (Onix)...")

if not filesystem.exists("/etc/init.lua") then
  print("–û–®–ò–ë–ö–ê: –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
  computer.beep(200, 1)
  return
end

-- –ó–∞–≥—Ä—É–∑–∫–∞ —è–¥—Ä–∞
local success, err = pcall(dofile, "/etc/init.lua")
if not success then
  print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: " .. tostring(err))
  computer.beep(200, 1)
  return
end

print("O/UNIX —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
]],

    ["/etc/init.lua"] = [[
-- O/UNIX Init System
local computer = require("computer")
local filesystem = require("filesystem")

-- –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
local environment = {
  PATH = "/bin:/usr/bin",
  HOME = "/home/user",
  USER = "user",
  PWD = "/",
  SHELL = "/bin/osh"
}

function getenv(name)
  return environment[name]
end

function setenv(name, value)
  environment[name] = value
end

-- –ë–∞–∑–æ–≤–∞—è –æ–±–æ–ª–æ—á–∫–∞
function start_shell()
  if filesystem.exists("/bin/osh") then
    dofile("/bin/osh")
  else
    print("–û–®–ò–ë–ö–ê: –û–±–æ–ª–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
  end
end

print("O/UNIX 0.1 (Onix) –≥–æ—Ç–æ–≤–∞")
start_shell()
]],

    ["/bin/osh"] = [[
-- O/UNIX Shell
local computer = require("computer")
local filesystem = require("filesystem")

-- –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
local builtins = {
  help = function(args)
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("ls, pwd, cd, cat, echo, mkdir, rm")
    print("cp, mv, date, clear, exit, help")
  end,
  
  exit = function(args)
    return "exit"
  end,
  
  clear = function(args)
    local gpu = computer.getPCIDevices(findClass("GPU"))[1]
    if gpu then
      gpu.fill(1, 1, 80, 25, " ")
      gpu.setCursor(1, 1)
    end
  end
}

-- –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã
local function parse_command(line)
  local parts = {}
  for part in line:gmatch("%S+") do
    table.insert(parts, part)
  end
  return parts
end

-- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
local function execute_command(cmd, args)
  -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
  if builtins[cmd] then
    return builtins[cmd](args)
  end
  
  -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
  local cmd_path = "/bin/" .. cmd
  if filesystem.exists(cmd_path) then
    local success, result = pcall(dofile, cmd_path)
    if not success then
      print("–û—à–∏–±–∫–∞: " .. tostring(result))
    end
    return result
  else
    print("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: " .. cmd)
  end
end

-- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
local function show_prompt()
  io.write("user@onix:$ ")
  return io.read()
end

-- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±–æ–ª–æ—á–∫–∏
print("O/UNIX Shell 0.1")
print('–í–≤–µ–¥–∏—Ç–µ "help" –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥')

while true do
  local line = show_prompt()
  if not line then break end
  
  line = line:gsub("^%s*(.-)%s*$", "%1") -- trim
  
  if line == "" then
    -- –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
  else
    local parts = parse_command(line)
    local cmd = table.remove(parts, 1)
    local result = execute_command(cmd, parts)
    
    if result == "exit" then
      break
    end
  end
end
]],

    ["/bin/ls"] = [[
-- ls - list directory contents
local filesystem = require("filesystem")

local path = arg and arg[1] or "."

if not filesystem.exists(path) then
  print("ls: –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: " .. path)
  return
end

local list = filesystem.list(path)
for item in list do
  local full_path = filesystem.concat(path, item)
  if filesystem.isDirectory(full_path) then
    print(item .. "/")
  else
    print(item)
  end
end
]],

    ["/bin/pwd"] = [[
-- pwd - print working directory
print("/")
]],

    ["/bin/cd"] = [[
-- cd - change directory
print("cd: –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ–±–æ–ª–æ—á–∫–∏")
]],

    ["/bin/cat"] = [[
-- cat - concatenate files
local filesystem = require("filesystem")

local args = arg or {}

if #args == 0 then
  -- –ß—Ç–µ–Ω–∏–µ –∏–∑ stdin
  while true do
    local line = io.read()
    if not line then break end
    print(line)
  end
else
  for _, filename in ipairs(args) do
    if filesystem.exists(filename) then
      local file = io.open(filename, "r")
      if file then
        local content = file:read("*a")
        file:close()
        io.write(content)
      end
    else
      print("cat: –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Ñ–∞–π–ª–∞: " .. filename)
    end
  end
end
]],

    ["/bin/echo"] = [[
-- echo - display text
local args = arg or {}
print(table.concat(args, " "))
]],

    ["/bin/mkdir"] = [[
-- mkdir - make directories
local filesystem = require("filesystem")
local args = arg or {}

for _, dirname in ipairs(args) do
  if not filesystem.exists(dirname) then
    local success, err = pcall(filesystem.makeDirectory, dirname)
    if not success then
      print("mkdir: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: " .. tostring(err))
    end
  else
    print("mkdir: —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: " .. dirname)
  end
end
]],

    ["/bin/rm"] = [[
-- rm - remove files
local filesystem = require("filesystem")
local args = arg or {}

for _, filename in ipairs(args) do
  if filesystem.exists(filename) then
    if not filesystem.isDirectory(filename) then
      filesystem.remove(filename)
    else
      print("rm: —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: " .. filename)
    end
  else
    print("rm: –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Ñ–∞–π–ª–∞: " .. filename)
  end
end
]],

    ["/bin/date"] = [[
-- date - display date
print(os.date("%Y-%m-%d %H:%M:%S"))
]],

    ["/etc/motd"] = [[
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ O/UNIX 0.1 (Onix)
Unix-–ø–æ–¥–æ–±–Ω–∞—è –û–° –¥–ª—è OpenComputers
]]
  }

  for path, content in pairs(utilities) do
    local file = io.open(path, "w")
    if file then
      file:write(content)
      file:close()
      print("   ‚úÖ " .. path)
    else
      print("   ‚ùå –û—à–∏–±–∫–∞: " .. path)
    end
  end
end

-- –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏
local function performInstallation()
  print("\n–ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É O/UNIX...")
  print("===============================")
  
  local issues = checkCompatibility()
  if #issues > 0 then
    print("–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é:")
    for _, issue in ipairs(issues) do
      print("   " .. issue)
    end
    return false
  end
  
  print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–∞")
  
  createFilesystemStructure()
  installSystemUtilities()
  
  print("\nüéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ O/UNIX –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
  print("===============================")
  print("O/UNIX 0.1 (Onix)")
  print("")
  print("–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
  print("  ls, pwd, cat, echo, mkdir, rm, date")
  print("  clear, help, exit")
  print("")
  print("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ O/UNIX")
  
  return true
end

-- –ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞
print("O/UNIX Installer v0.1")
print("=====================")

print("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É? (y/n)")
local answer = io.read()

if answer:lower() == "y" then
  performInstallation()
else
  print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
end
